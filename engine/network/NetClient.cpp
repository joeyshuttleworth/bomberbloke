//
// Created by dave on 08.06.20.
//

#include "NetClient.hpp"
#include <string>
#include <iostream>
#include "engine.hpp"


NetClient::NetClient() {
    if (enet_initialize() != 0) {
        printf("ERROR: An error occurred while initializing ENet");
        return;
    }
    //TODO: insert variables for host
    this->host = enet_host_create(nullptr, 1, 1, 0, 0);
}

NetClient::~NetClient() {
    // Clean up ENet
    disconnectClient();
    enet_host_destroy(this->host);
    enet_deinitialize();
}

void NetClient::connectClient(std::string serverAddress, enet_uint16 port) {
    this->serverAddress = serverAddress;
    this->port = port;
    log_message(INFO, "attempting to connect");
    enet_address_set_host(&address, this->serverAddress.c_str());
    address.port = this->port;

    //Initiate the connection, with only one channel
    this->peer = enet_host_connect(this->host, &address, 1, 0);
    if (peer == NULL) {
        fprintf(stderr, "No available peers for initiating an ENet connection.\n");
        exit(EXIT_FAILURE);
    }
    // Wait up to 5 seconds for the connection attempt to succeed. */
    if (enet_host_service(this->host, &event, 5000) > 0 &&
        event.type == ENET_EVENT_TYPE_CONNECT) {
        printf("Connection to %s%u succeeded.\n", this->serverAddress.c_str(), this->port);

    } else {
        enet_peer_reset(peer);
        printf("Connection to %s%u failed.\n", this->serverAddress.c_str(), this->port);
    }
}

void NetClient::disconnectClient() {
    //An ENET_EVENT_DISCONNECT event will be generated by enet_host_service() once the disconnection is complete.
    // We need to poll, as we could recieve other packets first?
    ENetEvent event;
    enet_peer_disconnect(this->peer, 0);
    while (enet_host_service(this->host, &event, 3000) > 0) {
        switch (event.type) {
          case ENET_EVENT_TYPE_RECEIVE:
            enet_packet_destroy(event.packet);
            break;
          case ENET_EVENT_TYPE_DISCONNECT:
            printf("Disconnection succeeded.\n");
            return;
          default:
            break;
        }
    }
    //Disconnect didn't happen in three seconds, force reset peer
    enet_peer_reset(this->peer);
}

bool NetClient::isConnected(){
    if(&this->host != nullptr){
        return true;
    }
    return false;
}
